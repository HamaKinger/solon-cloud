    @Post
    @Mapping("/test1")
    public void test1 (@Body List<String> ids) throws ExecutionException, InterruptedException {
        AtomicReference<List<JSONObject>> listAtomicReference = new AtomicReference<>(Lists.newArrayList());
        List<CompletableFuture<Void>> futures = ids.stream().map(id -> CompletableFuture.runAsync(() -> {
            String url = "http://localhost:8081/freedom-produce/test2" + "?id=" + id;
            HttpRequest get = HttpUtil.createGet(url);
            Map<String,String> headers = new HashMap<>();
            headers.put(Constant.TRACE_ID,MDC.get(Constant.TRACE_ID));
            get.addHeaders(headers);
            HttpResponse execute = get.execute();
            String body = execute.body();
            log.info("执行返回结果:{}",body);
            JSONObject jsonObject = JSON.parseObject(body);
            List<JSONObject> jsonObjects = listAtomicReference.get();
            jsonObjects.add(jsonObject);
            listAtomicReference.set(jsonObjects);
        },threadPoolUtils)).toList();
        CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
                .thenRun(() -> log.info("list:{}", listAtomicReference.get()))
                .get();
    }
